#include <iostream>
#include <math.h>
using namespace std;
/*int FindMax(int** X, int cols)
{

}*/




/*int FindMin(int** X, int size)
{
	int min = INT_MAX;
	for (int i = 0; i < size - 1; i++)
	{
		for (int j = i + 1; j < size; j++)
		{
			if (X[i][j] > 0) {
				if (X[i][j] < min)
					min = X[i][j];
			}
		}
	}
	cout << min<<"\n";
	return min;
}*/





int main()
{
	int rows, cols, a, b;
	cout << "Enter left border a= ";
	cin >> a;
	cout << "Enter right border b= ";          // Левая и правая граница значений в матрице
	cin >> b;
	


	while (a == b || b < a) {
		cout << "Incorrect data\n";
		cout << "Enter left border a= ";
		cin >> a;
		cout << "Enter right border b= ";      // Условие существования границ
		cin >> b;
	}


	cout << "Enter number of rows = ";
	  cin >> rows;
	  while (rows <= 0) {
		  cout << "Incorrect data. Number of elements in matrix should be more then zero.\n";
		  cout << "Enter number of rows = ";
		  cin >> rows;
	  }
	  cout << "\n";
	  cols = rows;                        //Колличество столбиков в матрице

	  system("pause");
	  
	  int **arr = new int* [rows];
	for (int i = 0; i < rows; i++) {
		arr[i] = new int[cols];
	}
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			arr[i][j] =a+rand() % (b-a+1);     //Массив заполняется числами и получается матрица
			cout << arr[i][j] << "\t";
			
		}

		
		cout << endl;
	}
	system("pause");



	cout << "Elements above the main diagonal:\n";
	for (int i = 0; i < rows; i++) {
		for (int j = i + 1; j < rows; j++) {      //Вывод элементов выше главной диагонали
			cout<< arr[i][j]<<"\n";
		}
		}
	system("pause");



	cout << "The minimum positive element: ";
	int min = b;
	for (int i = 0; i < rows - 1; i++)
	{
		for (int j = i + 1; j < rows; j++)
		{
			if (arr[i][j] > 0) {
				if (arr[i][j] < min)
					min = arr[i][j];
			}
		}
	}
	if (min > 0) {
		cout << min << "\n";; //Вывод минимального положительного числа выше гланой диагонали
		system("pause");
	}
	else {
		cout << "There aren`t positive elements\n";
	}






    cout << "Elemets under the main diagonal and above the collateral diagonal:\n";
	for (int i = 1; i <= cols - 2; i++) {
		if (i <= (cols - 1) / 2) {
			for (int j = 0; j < i; j++) {
				cout<< arr[i][j]<<"\n";
			}
		}
		else {
			for (int j = 0; j < cols - i - 1; ++j) {
				cout<< arr[i][j]<<"\n";
			}
		}
	}
	cout << "The maximum negative: ";
	int max = a;
	for (int i = 1; i <= cols - 2; i++) {
		if (i <= (cols - 1) / 2) {
			for (int j = 0; j < i; j++) {
				if (arr[i][j] < 0) {
					if (arr[i][i] > max) {
						max = arr[i][j];
				}
				}
			}
		}
		else {
			for (int j = 0; j < cols - i - 1; ++j) {
				if (arr[i][j] < 0) {
					if (arr[i][i] > max) {
						max = arr[i][j];
					}
				}
			}
		}
	}
	if (max < 0) {
		cout << max << "\n";; //Вывод максимального отрицательного
		system("pause");
	}
	else {
		cout << "There aren`t negative elements\n";
	}
	
	/*cout << "Elemets under the main diagonal:\n";
	for (int i = 0, j = i + 1; (i < rows)&&(j<rows); i++, j++) {
		for (int i = 1, j = 0; (i < rows)&&(j < i); i++, j++) {
			cout << arr[i][j] << "\n";
		}

	}*/

	delete[] arr;	
		
	
	}






/*#include <iostream>
#define N 10
using namespace std;

int main()
{
	int A[N][N], i, j;

	for (i = 0; i < N; i++)
		for (j = 0; j < N; j++)
			A[i][j] = 0;

	for (i = 0; i < N; i++)
		A[i][N - i - 1] = i + 1;

	for (i = 0; i < N; i++)
	{
		for (j = 0; j < N; j++)
			cout << A[i][j] << "  ";
		cout << "\n";
	}

	cin.get();
	return 0;
}*/
